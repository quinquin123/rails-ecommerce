<!-- app/views/reviews/_reviews.html.erb -->
<div class="reviews-section">
  <div class="reviews-header d-flex justify-content-between align-items-center mb-4">
    <h4 class="mb-0">
      Customer Reviews 
      <span class="text-muted fs-6">(<%= product.reviews_count %> reviews)</span>
    </h4>
    
    <% if product.reviews_count > 0 %>
      <div class="overall-rating">
        <div class="rating-display">
          <span class="average-rating fs-5 fw-bold text-warning">
            <%= product.average_rating %>
          </span>
          <div class="stars">
            <% product.average_rating.to_i.times do %>
              <i class="fas fa-star text-warning"></i>
            <% end %>
            <% (5 - product.average_rating.to_i).times do %>
              <i class="far fa-star text-warning"></i>
            <% end %>
          </div>
        </div>
      </div>
    <% end %>
  </div>

  <!-- Rating Distribution Chart (NEW) -->
  <% if product.reviews_count > 0 %>
    <div class="rating-distribution-card mb-4">
      <div class="card">
        <div class="card-body p-4">
          <h5 class="card-title mb-3">
            <i class="fas fa-chart-bar me-2 text-primary"></i>
            Rating Breakdown
          </h5>
          
          <div class="rating-distribution">
            <% product.rating_distribution.each do |rating_data| %>
              <div class="rating-row d-flex align-items-center mb-3">
                <div class="rating-label me-3" style="width: 60px;">
                  <span class="fw-semibold">
                    <%= rating_data[:rating] %> 
                    <i class="fas fa-star text-warning ms-1"></i>
                  </span>
                </div>
                
                <div class="rating-bar-container flex-grow-1 me-3" style="height: 20px;">
                  <div class="rating-bar bg-light rounded-pill overflow-hidden h-100">
                    <div class="rating-fill bg-warning" 
                         style="width: <%= rating_data[:percentage] %>%; height: 100%; transition: width 0.5s ease-in-out;">
                    </div>
                  </div>
                </div>
                
                <div class="rating-stats text-end" style="width: 80px;">
                  <small class="text-muted">
                    <%= rating_data[:count] %> 
                    (<%= rating_data[:percentage] %>%)
                  </small>
                </div>
              </div>
            <% end %>
          </div>
          
          <!-- Summary Stats -->
          <div class="rating-summary-stats mt-4 pt-3 border-top">
            <div class="row text-center">
              <div class="col-4">
                <div class="stat-item">
                  <div class="stat-value fs-4 fw-bold text-primary">
                    <%= product.average_rating %>
                  </div>
                  <small class="text-muted">Average Rating</small>
                </div>
              </div>
              <div class="col-4">
                <div class="stat-item">
                  <div class="stat-value fs-4 fw-bold text-success">
                    <%= product.reviews_count %>
                  </div>
                  <small class="text-muted">Total Reviews</small>
                </div>
              </div>
              <div class="col-4">
                <div class="stat-item">
                  <div class="stat-value fs-4 fw-bold text-info">
                    <%= product.rating_distribution.find { |r| r[:rating] == 5 }[:percentage] %>%
                  </div>
                  <small class="text-muted">5-Star Reviews</small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <!-- Add Review Button -->
  <% if user_signed_in? && current_user.buyer? %>
    <% user_has_reviewed = product.reviews.exists?(buyer: current_user) %>
    <% user_has_purchased = current_user.orders.joins(:order_items)
                                      .where(order_items: { product: product })
                                      .where(status: 'delivered').exists? %>
    
    <% unless user_has_reviewed %>
      <% if user_has_purchased %>
        <div class="mb-4">
          <button type="button" class="btn btn-outline-primary" onclick="toggleReviewForm()">
            <i class="fas fa-plus"></i> Write a Review
          </button>
        </div>
        
        <div id="review-form-container" style="display: none;">
          <%= render 'reviews/form', review: Review.new, product: product, order: nil %>
        </div>
      <% else %>
        <div class="alert alert-info mb-4">
          <i class="fas fa-info-circle"></i>
          You need to purchase and receive this product before you can write a review.
        </div>
      <% end %>
    <% else %>
      <div class="alert mb-4">
        <i class="fas fa-check-circle"></i>
        You have already reviewed this product.
      </div>
    <% end %>
  <% end %>

  <!-- Reviews List -->
  <div class="reviews-list">
    <% if product.reviews.any? %>
      <!-- Reviews Header with Sorting and Filtering Options -->
      <div class="reviews-list-header mb-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h5 class="mb-0">
            <i class="fas fa-comments me-2 text-primary"></i>
            Customer Feedback
          </h5>
          <div class="sort-options">
            <small class="text-muted me-2">Sort by:</small>
            <select class="form-select form-select-sm d-inline-block" style="width: auto;" onchange="sortReviews(this.value)">
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="highest">Highest Rating</option>
              <option value="lowest">Lowest Rating</option>
            </select>
          </div>
        </div>
        
        <!-- Rating Filter -->
        <div class="rating-filter mb-3">
          <small class="text-muted me-2">Filter by rating:</small>
          <div class="btn-group btn-group-sm" role="group">
            <button type="button" class="btn btn-outline-secondary" onclick="filterReviews(0)">All (<%= product.reviews_count %>)</button>
            <% (1..5).reverse_each do |rating| %>
              <% count = product.reviews.where(rating: rating).count %>
              <button type="button" class="btn btn-outline-secondary" onclick="filterReviews(<%= rating %>)">
                <%= rating %> <i class="fas fa-star text-warning"></i> (<%= count %>)
              </button>
            <% end %>
          </div>
        </div>
      </div>

      <div id="reviews-container">
        <% product.reviews.includes(:buyer).order(created_at: :desc).each_with_index do |review, index| %>
          <div class="review-item border-bottom py-4" data-rating="<%= review.rating %>" data-date="<%= review.created_at.to_i %>">
            <div class="review-header d-flex justify-content-between align-items-start mb-3">
              <div class="reviewer-info">
                <div class="d-flex align-items-center mb-2">
                  <div class="reviewer-avatar me-2">
                    <i class="fas fa-user-circle text-primary fs-4"></i>
                  </div>
                  <div>
                    <h6 class="mb-0 fw-semibold">
                      <%= review.buyer.name.present? ? review.buyer.name : 'Anonymous Customer' %>
                    </h6>
                    <small class="text-muted">
                      <i class="fas fa-shield-alt me-1 text-success"></i>Verified Purchase
                    </small>
                  </div>
                </div>
                <div class="review-rating d-flex align-items-center">
                  <div class="stars me-2">
                    <% review.rating.times do %>
                      <i class="fas fa-star text-warning"></i>
                    <% end %>
                    <% (5 - review.rating).times do %>
                      <i class="far fa-star text-muted"></i>
                    <% end %>
                  </div>
                  <span class="rating-text fw-semibold text-primary">
                    <%= review.rating %>.0 out of 5
                  </span>
                </div>
              </div>
              <div class="review-date text-end">
                <small class="text-muted d-block">
                  <i class="fas fa-calendar me-1"></i>
                  <%= review.created_at.strftime("%B %d, %Y") %>
                </small>
                <small class="text-muted">
                  <%= time_ago_in_words(review.created_at) %> ago
                </small>
              </div>
            </div>
            
            <% if review.comment.present? %>
              <div class="review-comment bg-light p-3 rounded">
                <div class="comment-text">
                  <%= simple_format(h(review.comment)) %>
                </div>
              </div>
            <% else %>
              <div class="no-comment text-muted fst-italic">
                <i class="fas fa-quote-left me-1"></i>
                No written review provided
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    <% else %>
      <div class="no-reviews text-center py-5 bg-light rounded">
        <div class="no-reviews-icon mb-3">
          <i class="fas fa-comment-slash text-muted" style="font-size: 3rem;"></i>
        </div>
        <h5 class="text-muted mb-2">No reviews yet</h5>
        <p class="text-muted mb-0">Be the first to share your experience with this product!</p>
        <% if user_signed_in? && current_user.buyer? %>
          <div class="mt-3">
            <small class="text-muted">
              <i class="fas fa-info-circle me-1"></i>
              Purchase this product to leave a review
            </small>
          </div>
        <% end %>
      </div>
    <% end %>
  </div>
</div>

<script>
function toggleReviewForm() {
  const formContainer = document.getElementById('review-form-container');
  if (formContainer.style.display === 'none' || formContainer.style.display === '') {
    formContainer.style.display = 'block';
    formContainer.scrollIntoView({ behavior: 'smooth' });
  } else {
    formContainer.style.display = 'none';
  }
}

function sortReviews(sortBy) {
  const container = document.getElementById('reviews-container');
  const reviews = Array.from(container.children);
  
  reviews.sort((a, b) => {
    switch(sortBy) {
      case 'newest':
        return parseInt(b.dataset.date) - parseInt(a.dataset.date);
      case 'oldest':
        return parseInt(a.dataset.date) - parseInt(b.dataset.date);
      case 'highest':
        return parseInt(b.dataset.rating) - parseInt(a.dataset.rating);
      case 'lowest':
        return parseInt(a.dataset.rating) - parseInt(b.dataset.rating);
      default:
        return 0;
    }
  });
  
  reviews.forEach(review => container.appendChild(review));
}

function filterReviews(rating) {
  const container = document.getElementById('reviews-container');
  const reviews = Array.from(container.children);
  
  reviews.forEach(review => {
    if (rating === 0 || parseInt(review.dataset.rating) === rating) {
      review.style.display = 'block';
    } else {
      review.style.display = 'none';
    }
  });
  
  // Update active state of filter buttons
  const buttons = document.querySelectorAll('.rating-filter .btn');
  buttons.forEach(button => {
    const btnRating = parseInt(button.textContent.trim().charAt(0)) || 0;
    if (btnRating === rating) {
      button.classList.remove('btn-outline-secondary');
      button.classList.add('btn-primary');
    } else {
      button.classList.remove('btn-primary');
      button.classList.add('btn-outline-secondary');
    }
  });
}

function markHelpful(reviewId, helpful) {
  // Add your AJAX call here to mark review as helpful
  console.log(`Review ${reviewId} marked as ${helpful ? 'helpful' : 'not helpful'}`);
  
  // Example: Show feedback
  const event = helpful ? 'helpful' : 'not helpful';
  // You can implement actual functionality here
}

// Animate rating bars on page load
document.addEventListener('DOMContentLoaded', function() {
  const ratingBars = document.querySelectorAll('.rating-fill');
  ratingBars.forEach((bar, index) => {
    setTimeout(() => {
      bar.style.opacity = '1';
    }, index * 100);
  });
  
  // Initialize with all reviews showing
  filterReviews(0);
});
</script>

<style>
.reviews-section {
  margin-top: 2rem;
  padding-top: 2rem;
  border-top: 1px solid #dee2e6;
}

.overall-rating {
  text-align: right;
}

.rating-display .stars {
  font-size: 0.9rem;
}

.review-item:last-child {
  border-bottom: none !important;
}

.review-header {
  margin-bottom: 0.75rem;
}

.reviewer-info h6 {
  margin-bottom: 0.25rem;
  font-weight: 600;
}

.review-rating {
  font-size: 0.9rem;
}

.review-comment {
  margin-left: 0;
  padding-left: 0;
}

.review-comment p {
  line-height: 1.6;
  color: #495057;
}

.no-reviews {
  background-color: #f8f9fa;
  border-radius: 0.5rem;
  margin: 2rem 0;
}

/* Rating Distribution Styles */
.rating-distribution-card {
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  border-radius: 12px;
  overflow: hidden;
}

.rating-distribution-card .card {
  border: none;
}

.rating-row {
  transition: all 0.3s ease;
}

.rating-row:hover {
  background-color: rgba(0,123,255,0.05);
  padding: 0.5rem;
  border-radius: 8px;
}

.rating-bar {
  position: relative;
  background-color: #e9ecef !important;
}

.rating-fill {
  background: linear-gradient(90deg, #ffc107 0%, #fd7e14 100%) !important;
  border-radius: inherit;
  transition: width 0.8s ease-in-out;
}

.rating-label {
  font-size: 0.9rem;
  min-width: 60px;
}

.rating-stats {
  font-size: 0.85rem;
  min-width: 80px;
}

.rating-summary-stats {
  background: rgba(0,123,255,0.02);
  border-radius: 8px;
  padding: 1rem 0;
}

.stat-item {
  text-align: center;
}

.stat-value {
  line-height: 1;
  margin-bottom: 0.25rem;
}

/* Enhanced Review Item Styles */
.review-item {
  transition: all 0.3s ease;
  border-radius: 8px;
  margin-bottom: 1rem;
}

.review-item:hover {
  background: rgba(0, 0, 0, 0.02);
  transform: translateX(5px);
  padding-left: 1rem !important;
}

.review-comment {
  background: #f8f9fa;
  border-left: 4px solid #0d6efd;
  border-radius: 8px;
}

.reviewer-avatar i {
  color: #0d6efd;
  background: rgba(13, 110, 253, 0.1);
  padding: 0.5rem;
  border-radius: 50%;
}

.reviews-list-header {
  background: rgba(0,123,255,0.05);
  padding: 1rem;
  border-radius: 8px;
  margin-bottom: 1.5rem;
}

/* Rating Filter Styles */
.rating-filter {
  padding: 0.5rem 1rem;
  background: rgba(0,0,0,0.02);
  border-radius: 8px;
}

.rating-filter .btn-group {
  flex-wrap: wrap;
  gap: 0.25rem;
}

.rating-filter .btn {
  font-size: 0.8rem;
  padding: 0.25rem 0.5rem;
  border-radius: 20px !important;
}

/* Responsive Design */
@media (max-width: 768px) {
  .reviews-header {
    flex-direction: column;
    align-items: start !important;
    gap: 1rem;
  }
  
  .overall-rating {
    text-align: left;
  }
  
  .rating-row {
    flex-wrap: wrap;
  }
  
  .rating-label {
    width: 100%;
    margin-bottom: 0.5rem;
  }
  
  .rating-summary-stats .col-4 {
    margin-bottom: 1rem;
  }
  
  .reviews-list-header {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }
  
  .rating-filter .btn-group {
    justify-content: center;
  }
  
  .review-item:hover {
    transform: none;
    padding-left: 0.75rem !important;
  }
  
  .review-actions {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }
}

/* Animation for rating bars */
.rating-fill {
  opacity: 0;
  animation: fillBar 1s ease-in-out forwards;
}

@keyframes fillBar {
  from {
    width: 0 !important;
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
</style>